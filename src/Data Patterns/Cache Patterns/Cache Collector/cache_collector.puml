@startuml

interface IDatabase {
    + getData (inx): []
}

class Database {
    + getData (inx): []
}

class ProxyDatabase {
    - database
    - cache
    - collector
    - timer
    + getData (inx): []
}

class Record {
    + value: any
    + lastUse: int
}

class Cache {
    - register: Record[]
    + get (key): any | undefined
    + put (key, value): any
    + has (key): boolean
    + remove (key): void
    + clear (): void
    + keys (): string[]
    + lastUse(key): int | null
}

class CacheCollector {
    - cache
    - lifeTime: int
    + collect ()
}

class Timer {
    + start (delay, handler)
}

note as HandleTimer
    CacheCollector::collect()
end note

note as ClearNote
    FOREACH Cache::all() : key
        IF Cache:lastUse(key) < NOW - lifeTime THEN
            Cache:remove(key)
end note

IDatabase <.. Database
IDatabase <.. ProxyDatabase

ProxyDatabase o--> Database
ProxyDatabase *--> Cache
ProxyDatabase *--> CacheCollector
ProxyDatabase o-> Timer

Cache *--> Record

CacheCollector ..> Cache
CacheCollector ..> ClearNote

Timer ..> HandleTimer

@enduml
