@startuml

interface Entity {

}

abstract class EntityManager {
    + findAll(): Entity[]
    + findBy(props: []): Entity | null
    + save(entity): void
    + delete(entity): void
}

abstract class EntityMapper {
    + map(Entity, props: []): void
}

class Person {
    + id: int
    + firstName: string
    + lastName: string
    + email: string
}

class PersonMapper {
    + map(Person, data): void
}

class PersonManager {
    + findAll(): Person[]
    + find(id): Person | null
    + findBy(props: []): Person[] | null
    + save(person): void
    + delete(person): void
}

class EmailManager {
    + findAll(): props: []
    + findBy(props: []): [] | null
    + save(props: []): void
    + delete(props: []): void
}

class ManagerFactory {
    + makeManger(className): EntityManager
}

ManagerFactory ..> Entity
ManagerFactory ..> EntityManager

EntityManager ..> Entity
EntityManager ..> EntityMapper
EntityMapper ..> Entity

PersonManager ..> EmailManager
PersonManager ..> PersonMapper
PersonManager ..> Person
PersonMapper ..> Person

note "factory\n\t.makeManger(person.class)\n\t.save(person)" as saveNote

ManagerFactory .> saveNote

@enduml
